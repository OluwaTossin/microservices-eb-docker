name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker images
      run: |
        docker build -t tjesctacy/service1:latest -f service1/Dockerfile service1
        docker build -t tjesctacy/service2:latest -f service2/Dockerfile service2
        docker push tjesctacy/service1:latest
        docker push tjesctacy/service2:latest

  create_application_versions:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Create application version for service1
      id: create_service1_version
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: 'us-east-1'
      run: |
        VERSION_LABEL=service1-version-$(date +%s)
        echo "SERVICE1_VERSION_LABEL=$VERSION_LABEL" >> $GITHUB_ENV
        aws elasticbeanstalk create-application-version \
          --application-name MicroservicesApp \
          --version-label $VERSION_LABEL \
          --source-bundle S3Bucket="service1zip",S3Key="service1.zip"
        echo "::set-output name=service1_version::$VERSION_LABEL"

    - name: Create application version for service2
      id: create_service2_version
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: 'us-east-1'
      run: |
        VERSION_LABEL=service2-version-$(date +%s)
        echo "SERVICE2_VERSION_LABEL=$VERSION_LABEL" >> $GITHUB_ENV
        aws elasticbeanstalk create-application-version \
          --application-name MicroservicesApp \
          --version-label $VERSION_LABEL \
          --source-bundle S3Bucket="service1zip",S3Key="service2.zip"
        echo "::set-output name=service2_version::$VERSION_LABEL"

  confirm_application_versions:
    needs: create_application_versions
    runs-on: ubuntu-latest
    outputs:
      service1_version_processed: ${{ steps.confirm_service1_version.outputs.service1_version_processed }}
      service2_version_processed: ${{ steps.confirm_service2_version.outputs.service2_version_processed }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Confirm application version for service1
      id: confirm_service1_version
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: 'us-east-1'
      run: |
        VERSION_LABEL=${{ needs.create_application_versions.outputs.service1_version }}
        for attempt in {1..30}; do
          STATUS=$(aws elasticbeanstalk describe-application-versions --application-name MicroservicesApp --version-labels $VERSION_LABEL --query 'ApplicationVersions[0].Status' --output text)
          echo "Attempt $attempt: Application version status for service1 is $STATUS"
          if [ "$STATUS" == "Processed" ]; then
            echo "::set-output name=service1_version_processed::true"
            break
          fi
          sleep 20
        done

    - name: Confirm application version for service2
      id: confirm_service2_version
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: 'us-east-1'
      run: |
        VERSION_LABEL=${{ needs.create_application_versions.outputs.service2_version }}
        for attempt in {1..30}; do
          STATUS=$(aws elasticbeanstalk describe-application-versions --application-name MicroservicesApp --version-labels $VERSION_LABEL --query 'ApplicationVersions[0].Status' --output text)
          echo "Attempt $attempt: Application version status for service2 is $STATUS"
          if [ "$STATUS" == "Processed" ]; then
            echo "::set-output name=service2_version_processed::true"
            break
          fi
          sleep 20
        done

  deploy:
    needs: confirm_application_versions
    runs-on: ubuntu-latest
    if: needs.confirm_application_versions.outputs.service1_version_processed == 'true' && needs.confirm_application_versions.outputs.service2_version_processed == 'true'

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Deploy service1 to Elastic Beanstalk
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: 'us-east-1'
      run: |
        aws elasticbeanstalk update-environment --application-name MicroservicesApp --environment-name MicroservicesApp-env-2 --version-label ${{ needs.create_application_versions.outputs.service1_version }}

    - name: Deploy service2 to Elastic Beanstalk
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: 'us-east-1'
      run: |
        aws elasticbeanstalk update-environment --application-name MicroservicesApp --environment-name MicroservicesApp3-env --version-label ${{ needs.create_application_versions.outputs.service2_version }}
